---
title: "STAT 331 Portfolio"
author: "Skylar McCurry"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
embed-resources: true
code-tools: true
code-fold: true
execute: 
  echo: true
  warning: false
  message: false
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
teacher_evals <- read_csv(here::here("Week 3", "teacher_evals.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
surveys <- read.csv(here::here("surveys.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
#| Lab 4 question 5 
income_info <- ca_childcare |> 
filter(study_year %in% c(2008, 2018)
) |>
  group_by(region, study_year) |> 
    summarize(median_income = median(mhi_2018, na.rm = TRUE),
              .groups = "drop") |>
    pivot_wider(names_from = study_year, 
                values_from = median_income) |> 
    arrange(desc('2018')
) |>
    select(region, '2008', '2018') |> 
    rename('Region' = 'region',
    'Median Income 2008' = '2008',
    'Median Income 2018' = '2018')
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
#| lab 4 question 6
#| Is there a function that allows you to slice the min of a specific variable?
#| I used slice_min to automatically get me the lowest median charge for center based childcare for infants in a specfic region. 

ca_childcare |> 
group_by(region) |>
filter(study_year == 2018) |> 
summarize(mc_infant = median(mc_infant, na.rm = TRUE)) |>
slice_min(mc_infant)
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
#| lab 4 question 5
#| I would highly recommend filtering first, so you are summarizing a smaller dataset.
#| In my revisons I filtered by 2008 and 2018 first so I could be working with a smaller dataset and have less room for error. 
income_info <- ca_childcare |> 
filter(study_year %in% c(2008, 2018)
) |>
  group_by(region, study_year) |> 
    summarize(median_income = median(mhi_2018, na.rm = TRUE),
              .groups = "drop") |>
    pivot_wider(names_from = study_year, 
                values_from = median_income) |> 
    arrange(desc('2018')
) |>
    select(region, '2008', '2018') |> 
    rename('Region' = 'region',
    'Median Income 2008' = '2008',
    'Median Income 2018' = '2018'
)
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
#| lab 5 
drivers_license_1 <- drivers_license |> 
    filter(gender == "male",
            str_detect(plate_number, "H42W")) 
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#| lab 5 
person_annabel <- person |> 
    filter(str_detect(name, regex("^Annabel", ignore_case = TRUE)), 
            address_street_name == "Franklin Ave") 
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
#| lab 5 
crime_scene_report_three <- crime_scene_report |>
filter(type == "murder", 
      city == "SQL City", 
      date == "20180115") |> 
    select(date, 
            type, 
            city, 
            description) 
    person_three <- person |> 
    filter(address_street_name == "Northwestern Dr") |> 
    arrange(desc(address_number)) 
    person_annabel <- person |> 
    filter(
        str_detect(name, regex("^Annabel", ignore_case = TRUE)), 
        address_street_name == "Franklin Ave") 
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
#| lab 4 question 3 
ca_childcare <- left_join(x = ca_childcare, 
                          y = tax_rev, 
                          by = join_by(county_name == entity_name, study_year == year))
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
#| lab 4 question 2
#| Do you want to keep EVERYTHING in both datasets?
#| Your code doesn’t specify how these two datsets should be joined, so you are relying on R recognizing the names of the columns that are the same between the two datasets. I would strongly recommend telling R exactly how you want the data to be joined—this code is more resistant to changes in the data.
#| I used an inner join, because I want to compare results from different counties. 
ca_childcare <- inner_join(x = counties, 
                          y = childcare_costs, 
                          by = join_by(county_fips_code == county_fips_code)
                          ) |> 
    filter(state_name == "California") 
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
#| lab 4 question 5
income_info <- ca_childcare |> 
filter(study_year %in% c(2008, 2018)
) |>
  group_by(region, study_year) |> 
    summarize(median_income = median(mhi_2018, na.rm = TRUE),
              .groups = "drop") |>
    pivot_wider(names_from = study_year, 
                values_from = median_income) |> 
    arrange(desc('2018')
) |>
    select(region, '2008', '2018') |> 
    rename('Region' = 'region',
    'Median Income 2008' = '2008',
    'Median Income 2018' = '2018'
)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
#| lab 4 question 8 
plot_median_mc_infant <- median_mc_infant |> 
    ggplot(mapping = aes(x = mc_infant, 
                         y = mhi_2018)
    ) +
    geom_point(alpha = 0.2) + 
    geom_smooth(method = "lm", se = FALSE, color = "darkblue")+ 
    theme_bw() +
    labs(x = "Infant Cost for Center Based Child Care", 
         y = "",
         title = "Relationship between median household income and full-time median weekly price for center-based childcare for an infant in California in 2018 ($)"
    ) +
    scale_x_continuous(
        labels = scales::label_dollar()
    ) + 
    scale_y_continuous(
        labels = scales::label_dollar()
    )
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
#| Lab 4 question 5 
#| Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?
#| I renamed the column titles so I know what they represent. 
income_info <- ca_childcare |> 
filter(study_year %in% c(2008, 2018)
) |>
  group_by(region, study_year) |> 
    summarize(median_income = median(mhi_2018, na.rm = TRUE),
              .groups = "drop") |>
    pivot_wider(names_from = study_year, 
                values_from = median_income) |> 
    arrange(desc('2018')
) |>
    select(region, '2008', '2018') |> 
    rename('Region' = 'region',
    'Median Income 2008' = '2008',
    'Median Income 2018' = '2018'
)
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
#| Lab 3 question 6
teacher_evals_clean |>
summarize(
  unique_teachers = n_distinct(teacher_id),
  unique_courses = n_distinct(course_id)
)
```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
#| Lab 4 question 8 
plot_median_mc_infant <- median_mc_infant |> 
    ggplot(mapping = aes(x = mc_infant, 
                         y = mhi_2018)
    ) +
    geom_point(alpha = 0.2) + 
    geom_smooth(method = "lm", se = FALSE, color = "darkblue")+ 
    theme_bw() +
    labs(x = "Infant Cost for Center Based Child Care", 
         y = "",
         title = "Relationship between median household income and full-time median weekly price for center-based childcare for an infant in California in 2018 ($)"
    ) +
    scale_x_continuous(
        labels = scales::label_dollar()
    ) + 
    scale_y_continuous(
        labels = scales::label_dollar()
    )
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#| Challenge 2 
sex_colors <- c("F" = "#e75480",
                "M" = "#6a5acd") +
ggplot(data = surveys,
      mapping = aes(x = sex, y = weight, color = sex)
      ) + 
    geom_boxplot(outlier.shape = NA) +
    scale_fill_manual(values = sex_colors) + 
    labs(
      title = "Relationship between Sex and Weight (g) in Rodents ", 
      subtitle = "Y-Axis: Weight (g)",
      x = "Sex", 
      y = "") +
    theme_bw()
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat
#| Lab 4 question 7 
#| Can you reorder the facets so they go in the same order as mine?
#| I reordered the factets to go in a row and list by Infant, Toddler, and Preschooler 
    
ggplot(mapping = aes(x = study_year, 
                         y = median_price, 
                         color = fct_reorder2(.f = region, 
                                             .x = study_year, 
                                             .y = median_price))
           ) + 
    geom_point(size = 0.2,
               alpha = 0.9) + 
    geom_smooth(se = FALSE,
                linewidth = 0.5, 
                size = 0.6, 
                alpha = 0.2) +
    scale_color_manual(values = rainbow(10)
    ) +
    facet_wrap(~ age_group, nrow = 1) + 
    labs(x = "Study Year", 
         y = "", 
         title = "Weekly Median Price for Center-Based Childcare($)", 
         color = "California Region"
         ) +
    theme_bw() + 
    theme(
      plot.title = element_text(size = 8),
      axis.text.x = element_text(size = 5),
      axis.text.y = element_text(size = 5),
      axis.title.x = element_text(size = 8),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 7),
      legend.key.height = unit(.4, "cm"),
      aspect.ratio = 1) +
    scale_x_continuous(
        breaks = seq(2008, 2018, by = 2)
    ) + 
  scale_y_continuous(
    limits = c(100,500),
    breaks = seq(100, 500, by = 100))
```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date
#| Lab 4 question 7 


ggplot(mapping = aes(x = study_year, 
                         y = median_price, 
                         color = fct_reorder2(.f = region, 
                                             .x = study_year, 
                                             .y = median_price))
           ) + 
    geom_point(size = 0.2,
               alpha = 0.9) + 
    geom_smooth(se = FALSE,
                linewidth = 0.5, 
                size = 0.6, 
                alpha = 0.2) +
    scale_color_manual(values = rainbow(10)
    ) +
    facet_wrap(~ age_group, nrow = 1) + 
    labs(x = "Study Year", 
         y = "", 
         title = "Weekly Median Price for Center-Based Childcare($)", 
         color = "California Region"
         ) +
    theme_bw() + 
    theme(
      plot.title = element_text(size = 8),
      axis.text.x = element_text(size = 5),
      axis.text.y = element_text(size = 5),
      axis.title.x = element_text(size = 8),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 7),
      legend.key.height = unit(.4, "cm"),
      aspect.ratio = 1) +
    scale_x_continuous(
        breaks = seq(2008, 2018, by = 2)
    ) + 
  scale_y_continuous(
    limits = c(100,500),
    breaks = seq(100, 500, by = 100))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
#| Lab 2 question 16
#| Switched x for weight because it had less values and y for the different types of rodents so it is easier to read. 

ggplot(data = surveys, 
  mapping = aes(x = weight, y = species)
) + 
geom_boxplot(outlier.shape = NA) +
geom_point(color = "steelblue", 
           alpha = 0.5) + 
labs( 
  title = "Relathionship between different types of Rodents and Weight", 
  subtitle = "Y axis: Species of Rodents",
  x = "Weight (g)", 
  y = "")
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
#| Lab 2 question 16
ggplot(
  data = surveys, 
  mapping = aes(x = weight, y = species)
) + 
geom_boxplot(outlier.shape = NA) +
geom_point(color = "steelblue", alpha = 0.5) + 
labs( 
  title = "Relathionship between different types of Rodents and Weight (g)", 
  subtitle = "Y axis: Species of Rodents",
  x = "Weight (g)", 
  y = "") + 
  theme_bw()
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
#| lab 4 question 7 
#| I made the chart title bigger and made x and y text smaller, so it is easier to read at first glance. 
ggplot(mapping = aes(x = study_year, 
                         y = median_price, 
                         color = fct_reorder2(.f = region, 
                                             .x = study_year, 
                                             .y = median_price))
           ) + 
    geom_point(size = 0.2,
               alpha = 0.9) + 
    geom_smooth(se = FALSE,
                linewidth = 0.5, 
                size = 0.6, 
                alpha = 0.2) +
    scale_color_manual(values = rainbow(10)
    ) +
    facet_wrap(~ age_group, nrow = 1) + 
    labs(x = "Study Year", 
         y = "", 
         title = "Weekly Median Price for Center-Based Childcare($)", 
         color = "California Region"
         ) +
    theme_bw() + 
    theme(
      plot.title = element_text(size = 8),
      axis.text.x = element_text(size = 5),
      axis.text.y = element_text(size = 5),
      axis.title.x = element_text(size = 8),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 7),
      legend.key.height = unit(.4, "cm"),
      aspect.ratio = 1) +
    scale_x_continuous(
        breaks = seq(2008, 2018, by = 2)
    ) + 
  scale_y_continuous(
    limits = c(100,500),
    breaks = seq(100, 500, by = 100))
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
#| lab 4 question 7 
#| colors are in order to align with my plot 
ca_childcare |> 
    filter(study_year >= 2008, study_year <= 2018) |>
    group_by(region, study_year) |> 
    select(region, study_year, mc_infant, mc_toddler, mc_preschool) |> 
    pivot_longer( 
                 cols = starts_with("mc_"), 
                 names_to = "age_group", 
                 values_to = "median_price") |> 
    mutate(age_group = case_when(age_group == "mc_infant" ~ "Infant",
                            age_group == "mc_toddler" ~ "Toddler", 
                            age_group == "mc_preschool" ~ "Preschool"),
    age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool"))
    ) |>
    ggplot(mapping = aes(x = study_year, 
                         y = median_price, 
                         color = fct_reorder2(.f = region, 
                                             .x = study_year, 
                                             .y = median_price))
           ) + 
    geom_point(size = 0.2,
               alpha = 0.9) + 
    geom_smooth(se = FALSE,
                linewidth = 0.5, 
                size = 0.6, 
                alpha = 0.2) +
    scale_color_manual(values = rainbow(10)
    ) +
    facet_wrap(~ age_group, nrow = 1) + 
    labs(x = "Study Year", 
         y = "", 
         title = "Weekly Median Price for Center-Based Childcare($)", 
         color = "California Region"
         ) +
    theme_bw() + 
    theme(
      plot.title = element_text(size = 8),
      axis.text.x = element_text(size = 5),
      axis.text.y = element_text(size = 5),
      axis.title.x = element_text(size = 8),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 7),
      legend.key.height = unit(.4, "cm"),
      aspect.ratio = 1) +
    scale_x_continuous(
        breaks = seq(2008, 2018, by = 2)
    ) + 
  scale_y_continuous(
    limits = c(100,500),
    breaks = seq(100, 500, by = 100))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
#| lab 3 question 7 
teacher_evals_clean |>
  distinct(teacher_id, .keep_all = TRUE) |>
  summarize(
    mean_seniority = mean(seniority, na.rm = TRUE)
    ) |> 
    ungroup() 
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
#| Lab 3 question 7 
teacher_evals_clean |>
  distinct(teacher_id, .keep_all = TRUE) |>
  group_by(academic_degree, sex) |>
  summarise(
    n_instructors  = n(),
    mean_seniority = mean(seniority, na.rm = TRUE),
    .groups = "drop")
```

-   Example 2

```{r}
#| label: dvs-5-2
#| Lab 3 quesion 9
teacher_evals_clean |>
  group_by(teacher_id, course_id) |> 
  summarize(n_questions = n_distinct(question_no)) |>
  filter(n_questions == 9) |> 
  select(teacher_id, course_id)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
#| lab 4 question 5
#| Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?
income_info <- ca_childcare |> 
filter(study_year %in% c(2008, 2018)
) |>
  group_by(region, study_year) |> 
    summarize(median_income = median(mhi_2018, na.rm = TRUE),
              .groups = "drop") |>
    pivot_wider(names_from = study_year, 
                values_from = median_income) |> 
    arrange(desc('2018')
) |>
    select(region, '2008', '2018') |> 
    rename('Region' = 'region',
    'Median Income 2008' = '2008',
    'Median Income 2018' = '2018')
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3
#| lab 4 question 5

income_info <- ca_childcare |> 
filter(study_year %in% c(2008, 2018)
) |>
  group_by(region, study_year) |> 
    summarize(median_income = median(mhi_2018, na.rm = TRUE),
              .groups = "drop") |>
    pivot_wider(names_from = study_year, 
                values_from = median_income) |> 
    arrange(desc('2018')
) |>
    select(region, '2008', '2018') |> 
    rename('Region' = 'region',
    'Median Income 2008' = '2008',
    'Median Income 2018' = '2018'
)
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across
#| lab 3 question 5 
teacher_evals_clean <- teacher_evals |>
    rename(sex = gender) |>
    filter(no_participants >= 10) |>
    mutate(
        across(c(teacher_id, 
                 course_id),                          
               as.character),
        across(c(academic_degree, 
                 sex), 
               as.factor)
    ) |>
    select(course_id,
           teacher_id,
           question_no,
           no_participants,
           resp_share, 
           SET_score_avg,
           percent_failed_cur,
           academic_degree,
           seniority,
           sex)
```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#| lab 4 question 7
ca_childcare |> 
    filter(study_year >= 2008, study_year <= 2018) |>
    group_by(region, study_year) |> 
    select(region, study_year, mc_infant, mc_toddler, mc_preschool) |> 
    pivot_longer( 
                 cols = starts_with("mc_"), 
                 names_to = "age_group", 
                 values_to = "median_price") |> 
    mutate(age_group = case_when(age_group == "mc_infant" ~ "Infant",
                            age_group == "mc_toddler" ~ "Toddler", 
                            age_group == "mc_preschool" ~ "Preschool"),
    age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool"))
    ) |>
    ggplot(mapping = aes(x = study_year, 
                         y = median_price, 
                         color = fct_reorder2(.f = region, 
                                             .x = study_year, 
                                             .y = median_price))
           ) + 
    geom_point(size = 0.2,
               alpha = 0.9) + 
    geom_smooth(se = FALSE,
                linewidth = 0.5, 
                size = 0.6, 
                alpha = 0.2) +
    scale_color_manual(values = rainbow(10)
    ) +
    facet_wrap(~ age_group, nrow = 1) + 
    labs(x = "Study Year", 
         y = "", 
         title = "Weekly Median Price for Center-Based Childcare($)", 
         color = "California Region"
         ) +
    theme_bw() + 
    theme(
      plot.title = element_text(size = 8),
      axis.text.x = element_text(size = 5),
      axis.text.y = element_text(size = 5),
      axis.title.x = element_text(size = 8),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 7),
      legend.key.height = unit(.4, "cm"),
      aspect.ratio = 1) +
    scale_x_continuous(
        breaks = seq(2008, 2018, by = 2)
    ) + 
  scale_y_continuous(
    limits = c(100,500),
    breaks = seq(100, 500, by = 100))
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
#| lab 4 question 9 
#| What are x and y in this equation? The context is important to consider!
#| In the formula reg_mod1 y is prediected by x. 
reg_mod1 <- lm(mhi_2018 ~ mc_infant, data = median_mc_infant)
summary(reg_mod1)
```

-   Example 2

```{r}
#| label: dsm-2-2
#| Challenge 3 question 3 
#| This works, but did you need to make a contingency table? Could you have input these vectors directly into the chisq.test() function?
#| I deleted the contingency table and just had chisq.table build the table for me with just x and y. 

chisq.table(teacher_evals_compare$set_level, 
            teacher_evals_compare$sen_level)

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

I revised my thinking in the course by going to office hours, looking back at old labs, and asking table members for help with labs and examples in class. I also redid two labs, Lab 2 and Lab 4, in order to grow and make my code better and meet the expectations of the class. There were definitely some challenges with revising the code, like in plotting Lab 4 Question 7. Even though my graph is not exactly like yours, I think I got pretty close to it and definitely made it better than the one I originally submitted, and I got rid of the warnings in the code too. During the creation of the portfolio, I looked back and revised a lot of my original code from previous labs that I might have missed to make sure it met the expectations clearly.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

I extended my thinking throughout the course by taking what I learned in class and applying it to my graphs. For example, in my original submission for Lab 4 Question 1, I made sure to add theme_bw(), and also included quotation marks when titling the y-axis to ensure a well-formatted graph. Even though it was not required, I remembered to add it to make sure the graph looked professional. I also applied a lot of the feedback and learnings from my peers from previous labs to improve my code.

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

I am adding my feedback from Lab 4 to a student in class. I learned how to change the region names in office hours by changing the names to what you want in Question 4 with "".

Hi Fisher! Nice job on Lab 4. You did really good at organizing and breaking up your code to make it easier to read. I also enjoyed reading your descriptions of the data set, very short and straight to the point! I also really liked how you added Infant, Toddler, and Preschool all into one vector using c. I will have to keep that in mind going forward. Overall your code looks great! To make your graph closer to Dr. Theobold, I would suggest in step 4 in as_factor to change the county names to its real names with no abbreviation or underscores to have the California Region key on the right side match to the closer graph. Other than that I think your code looks great. Nice work!

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
